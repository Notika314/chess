Started working on Chess project. 
Chris, here is how I see the game so far: 
The classes are :


class Game {
	boolean isDone = false; (changes to true when game is over)
	int currMove = 0; (indicates who moves next)
	int winner = 0; (0 while no winner yet, or if its a draw, 1 for white winner, 2 for black winner)
	printBoard(Square[8][8]) {
		## iterates through the squares, prints the content;
	}
	Piece readInput (String input) {
		##parses the input, if input tries to move the piece of right color, give control to piece.
		## otherwise, print that it's another army's turn to move
	}
	evaluate() {
		##check the board if the check ,checkmate, stale , or other special condition is created
	}
}

class Square {
	int x; 
	int y;
	Piece piece = NULL; 
	public Square (int a, int b) {
		this.x = a;
		this.y = b;
	}
}

class Piece(abstract class) {
	int color(0 for white ,1 for black);
	boolean isAlive = 1;
	boolean firstMove = 1; (every piece initially starts with this value being 1, and after first move is made it changes to 0)
	Square position;
	move(Square initialPosition, String finalPosition) {
		here we need to find the Square that matches final position. After that: 
			determine if moving to that position is matching the allowed type of move (horizonta;/vertical/..., the length of the move)
			determine if there are no other pieces on the way(except for the knight who can jump over pieces)
			determine if we won't step over our ally at the end of the move
			determine if we not endangering the king by our move
		If all of these conditions match, move the piece (update the piece's square, and square/s piece)
		If there was an enemy at the end of the move, remove the enemy (set its 'isAlive' field to 0)
	}
}


classes for each type of piece: King, Queen, Pawn, Knight, Rook, Castle:

class King extends Piece {
	.............
}
 -----------------------		------------------------------------		 -----------------------------------------------
|	   Game             |	   |     		  Square 				|		|   		Piece (abstract class)				|
------------------------|	   |------------------------------------|		|-----------------------------------------------|
| boolean isDone        |      | int x;   							|		|	int color  									|
| int winner(0,1 or 2)  |	   | int y;       						|		| 	boolean firstMove (initially is 1, sets     |
| int currMove(0 or 1)  |	   | Piece piece (by default Null)		|		|   to 0 after first move)						|
| #printBoard()         |	   | -----------------------------------|		| 	Square position 							|
| #readInput()	        |	   | Square() (constructor)- initializes|		|	const String[] validMoves 					|
| #evaluate()           |      | x and y, or x, y and piece         |		|-----------------------------------------------|
-------------------------	   --------------------------------------		|	#move() - see description above. Maybe can 	|
							   												|	be split into several methods - to check if |	
							   												|  	valid, check if occupied, check if safe (not|
							   												|   endangering the king), check if path is free|
							   												|   (except for knight), etc					|
							   												|	If all the conditions are met, make the move|
							   												|	Update the correcponding Squares (the one   |
							   												|   no longer occupied, and the one the piece is|
							   												|   moving to ). Set killed piece's isAlive 	|	
							   												|   to 0.										|
							   												|_______________________________________________|




			Begin the game: 
	game = new Game();
	game.currentMove = 0; (0 for current move belongs to white, 1 - for black)
	1) Initialize the squares for the board:
	board = new Square[8][8];
	for (int i=0;i<8;i++) {
		for (int j=0;j<8;j++) {
			board[i][j] = new Square(i,j);	
		}
	}

	2) Initialize the pieces: 
	whiteArmy = new Piece[16];
	blackArmy = new Piece[16];

	whiteArmy[1]=new Castle("white",board[0][0]);
	board[0][0] = whiteArmy[1];

	....Repeat for every piece. 
	..........
	After this is done, every board's square will have a piece assigned to it. 
	Now we can print the board: 
	game.printBoard(board);
	3) Start reading input and playing:
	piece = game.readInput(input string);
	if (piece.color!=game.currMove ) {
		print error - another army's turn to make a move
	}
	piece.move();
	game.evaluate();	## if any army wins, set the winner. 
	..... depending on results of evaluation, game might be ended:
	game.done=true;

	 or :
	game.currMove.toggle();
	...... start again from step 3)(will be a loop, that goes until  game.done == true)


Notes : 
1) Pieces(except for the pawns and the King don't beat the opponents yet). 
2) Handle incorrect input (don't let program break, print message and prompt again)
3) Castling
4) Call super() when possible

